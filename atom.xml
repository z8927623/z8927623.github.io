<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Wild Yaoyao's blog]]></title>
  <subtitle><![CDATA[野瑶瑶的技术博客]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-02-05T10:58:25.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Wild Yaoyao]]></name>
    <email><![CDATA[z8927623@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Objective-C Runtime之实现]]></title>
    <link href="http://yoursite.com/2016/02/04/Objective-C%20Runtime%E4%B9%8B%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2016/02/04/Objective-C Runtime之实现/</id>
    <published>2016-02-03T16:00:00.000Z</published>
    <updated>2016-02-05T10:58:25.000Z</updated>
    <content type="html"><![CDATA[<h3 id="id">id</h3><p>首先从<code>id</code>说起，Objective-C中id是个可以指向任何OC对象的指针，我们来看看它的结构</p>
<figure class="highlight thrift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">objc_object</span> </span>&#123;</span><br><span class="line">    Class isa;</span><br><span class="line">&#125; *id;</span><br></pre></td></tr></table></figure>
<p>可知，<code>id</code>是一个指向<code>objec_object</code>结构的C指针，而<code>objec_object</code>又包含了一个<code>isa</code>指针，该指针指向名为<code>Class</code>的变量，因此，每个OC对象都有个<code>Class</code>，那么<code>Class</code>又是什么呢？</p>
<h3 id="Class">Class</h3><p><code>typedef struct objc_class *Class;</code></p>
<p><code>Class</code>是一个指向<code>objc_class</code>结构的C指针，我们再来看看<code>objc_class</code>：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_class &#123;</span><br><span class="line">    Class isa;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#if !__OBJC2__</span></span><br><span class="line">    Class super_class                                        OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name                                         OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">    <span class="keyword">long</span> version                                             OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">    <span class="keyword">long</span> info                                                OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">    <span class="keyword">long</span> instance_size                                       OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">    <span class="keyword">struct</span> objc_ivar_list *ivars                             OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">    <span class="keyword">struct</span> objc_method_list **methodLists                    OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">    <span class="keyword">struct</span> objc_cache *cache                                 OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">    <span class="keyword">struct</span> objc_protocol_list *protocols                     OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line"><span class="preprocessor">#endif</span></span><br><span class="line"></span><br><span class="line">&#125; OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line"><span class="comment">/* Use `Class` instead of `struct objc_class *` */</span></span><br></pre></td></tr></table></figure>
<p>我们来看看它的每个成员</p>
<p><strong>isa</strong></p>
<p>我们看到，<code>objc_class</code>也包含一个指向<code>Class</code>的<code>isa</code>指针，这个<code>Class</code>就是<code>Meta-Class</code>，也就是元类，实际上元类也有个<code>isa</code>指针，元类的<code>isa</code>指针都指向了根元类。</p>
<p>因此，不仅<code>objc_object</code>是个对象，它的类<code>object_class</code>也是个对象，他们都有各自的类，<code>objc_object</code>的类是普通类，这个类存储了实例变量和实例方法列表；<code>object_class</code>的类是元类，元类它存储了类方法列表。当我们发送一个消息给一个对象的时候，runtime会从它的类的方法列表中查找消息。当发送给一个类的时候，runtime会从它的元类的方法列表中查找消息。</p>
<p>概括一下，普通的OC对象都有个<code>isa</code>指针，指向它们所属的类；而它们所属的类也有个<code>isa</code>指针，指向它们的元类；最后，它们的元类也有个<code>isa</code>指针，指向根元类。</p>
<p><strong>super_class</strong></p>
<p>指向父类，如果当前类是诸如NSObject或者NSProxy的根类，那么它的<code>super_class</code>为NULL</p>
<p><strong>name</strong></p>
<p>类名，可以根据这个信息获取类，如<code>objc_getClass</code></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">id</span> objc_getClass(<span class="keyword">const</span> <span class="keyword">char</span> *aClassName)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!aClassName) <span class="keyword">return</span> Nil;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// NO unconnected, YES class handler</span></span><br><span class="line">    <span class="keyword">return</span> look_up_class(aClassName, <span class="literal">NO</span>, <span class="literal">YES</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>version</strong></p>
<p>版本信息</p>
<p><strong>info</strong></p>
<p>runtime需要的一些信息</p>
<p><strong>instance_size</strong></p>
<p>该类实例变量大小，可以通过<code>class_getInstanceSize</code>获取</p>
<p><strong>ivars</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_ivar_list &#123;</span><br><span class="line">    <span class="keyword">int</span> ivar_count                                           OBJC2_UNAVAILABLE;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">ifdef</span> __LP64__</span></span><br><span class="line">    <span class="keyword">int</span> space                                                OBJC2_UNAVAILABLE;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">/* variable length structure */</span></span><br><span class="line">    <span class="keyword">struct</span> objc_ivar ivar_list[<span class="number">1</span>]                            OBJC2_UNAVAILABLE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>变量列表，可以通过<code>class_copyIvarList</code>获取</p>
<p><strong>methodLists</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_method_list &#123;</span><br><span class="line">	<span class="keyword">struct</span> objc_method_list *obsolete                        OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> method_count                                         OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line"><span class="preprocessor">#ifdef __LP64__</span></span><br><span class="line">	<span class="keyword">int</span> space                                                OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line"><span class="preprocessor">#endif</span></span><br><span class="line">	<span class="comment">/* variable length structure */</span></span><br><span class="line">	<span class="keyword">struct</span> objc_method method_list[<span class="number">1</span>]                        OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">&#125;                                                            OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br></pre></td></tr></table></figure>
<p>方法列表，可以通过<code>class_copyMethodList</code>获取。<br>如下示例代码：我们获取了该类的方法列表，存入数组中并返回。</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">NSArray</span> *)methodsArray &#123;</span><br><span class="line">    <span class="type">NSMutableArray</span> *<span class="type">array</span> = [<span class="type">NSMutableArray</span> <span class="type">array</span>];</span><br><span class="line">    </span><br><span class="line">    unsigned <span class="type">int</span> outCount;</span><br><span class="line">    <span class="type">Method</span> *methods = class_copyMethodList([self class], &amp;outCount);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">NSInteger</span> i = <span class="number">0</span>; i &lt; outCount; i++) &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="keyword">method</span> = methods[i];</span><br><span class="line">        <span class="type">SEL</span> selector = method_getName(<span class="keyword">method</span>);</span><br><span class="line">        <span class="type">NSString</span> *methodName = <span class="type">NSStringFromSelector</span>(selector);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> ([methodName isEqualToString:@<span class="string">".cxx_destruct"</span>]) &#123;</span><br><span class="line">            <span class="keyword">continue</span>; // 跳过这次循环，因为所有<span class="type">NSObjct</span>都含有该方法，runtime用于销毁C++对象的</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (methodName) &#123;</span><br><span class="line">            [<span class="type">array</span> addObject:methodName];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free(methods);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="type">array</span> copy];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>objc_cache</strong></p>
<p>之前说过runtime为了加快方法调用的速度，会将selector和imp存储起来，而负责这个任务的数据结构就是<code>Cache</code>，而<code>Cache</code>是一个指向<code>objc_cache</code>结构的C指针</p>
<p><code>typedef struct objc_cache *Cache;</code></p>
<p><code>objc_cache</code>的结构如下：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_cache &#123;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> mask <span class="comment">/* total = mask + 1 */</span>                 OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> occupied                                    OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">	Method buckets[<span class="number">1</span>]                                        OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">&#125; <span class="comment">/* GrP fixme should be OBJC2_UNAVAILABLE, but isn't because of spurious warnings in [super ...] calls */</span>;</span><br></pre></td></tr></table></figure>
<p><strong>protocols</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_protocol_list &#123;</span><br><span class="line">    <span class="keyword">struct</span> objc_protocol_list *next;</span><br><span class="line">    <span class="keyword">long</span> count;</span><br><span class="line">    Protocol *<span class="built_in">list</span>[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>协议列表，可以通过<code>class_copyProtocolList</code>获取</p>
<h3 id="Method">Method</h3><p><code>typedef struct objc_method *Method;</code></p>
<p><code>Method</code>是一个指向<code>objc_method</code>结构的C指针，即<strong>方法</strong>。那么<code>objc_method</code>又是什么呢？</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_method &#123;</span><br><span class="line">    SEL method_name                                          OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">    <span class="keyword">char</span> *method_types                                       OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">    IMP method_imp                                           OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br><span class="line">&#125;                                                            OBJC2_UN<span class="built_in">AVAILABLE</span>;</span><br></pre></td></tr></table></figure>
<p>从结构体可以看到，<code>objc_method</code>有三个成员列表，分别是<strong>方法名</strong>（<code>method_name</code>）、<strong>方法类型</strong>（<code>method_types</code>）和<strong>方法实现</strong>（<code>method_imp</code>）。方法名是一个<code>SEL</code>类型用于描述方法的名字，方法类型描述了方法参数的数据类型，方法实现是一个<code>IMP</code>类型，提供了函数实现的地址，当方法被调用的时候，执行的就是IMP函数内的代码。</p>
<h3 id="SEL">SEL</h3><p><code>typedef struct objc_selector *SEL;</code></p>
<p>一个指向<code>objc_selector</code>结构的C指针，用于表示方法选择器selector的类型。方法选择器selector代表<code>Method</code>的名字，其实它就是一个C字符串，由编译器生成，运行时在类加载的时候被自动映射到方法实现，也就是<code>IMP</code>。</p>
<p>我们可以使用<code>sel_registerName</code>在运行时添加新的selector，如果selector已经存在，则会返回存在的selector。除了<code>sel_registerName</code>，也可以通过OC编译器指令<code>@selector()</code>来获取，但是不能直接从C字符串强转过来。</p>
<h3 id="IMP">IMP</h3><p><code>typedef id (*IMP)(id, SEL, ...);</code></p>
<p><code>IMP</code>是一个函数指针，指向<code>Method</code>的实现，<code>Method</code>的实现是个C函数，因此确切地说是指向C函数的地址。它有两个固定参数，分别是<code>id</code>和<code>方法选择器SEL</code>，以及可变参数，并且返回一个<code>id</code>类型的对象。</p>
<h3 id="继承层次图">继承层次图</h3><p>了解了以上概念后，我们再来看看OC的继承层次图，其中实线表示<code>superclass</code>，虚线表示<code>isa</code>指针。</p>
<p><img src="/images/runtime_8.png" alt="runtime_8"></p>
<h3 id="实例">实例</h3><p><strong>例子1</strong>：结合class和object和结构，以<code>[@&quot;呵呵&quot; stringByAppendingString:@&quot;哒&quot;];</code>为例子，说明整个消息发送过程：</p>
<p>首先@”呵呵”是个对象，runtime系统根据对象的<code>isa</code>指针发现它的类（<code>Class</code>）是<code>NSString</code>，首先查找它的缓存（<code>cache</code>），如果找到了直接调用IMP，否则查看它的方法列表（<code>methodLists</code>），如果本类找不到，则查找父类（<code>super_class</code>），最后找到了匹配的方法选择器selector<code>-stringByAppendingString:</code>，然后取出和selector一起存储在<code>objc_method</code>中的IMP，触发。</p>
<p><strong>例子2</strong>：OC类的继承关系</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"MyClass.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;objc/runtime.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span></span></span><br><span class="line"></span><br><span class="line">- (instancetype)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        func(<span class="keyword">self</span>, <span class="keyword">@selector</span>(function), <span class="string">@"呵呵哒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> func(<span class="keyword">id</span> <span class="keyword">self</span>, SEL _cmd, <span class="built_in">NSString</span> *str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"str = %@"</span>, str);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 主要走实线</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"\n🙈This object is %p\n🙈This object's class is %@(%p)\n🙈%@'s super class is %@(%p)\n🙈%@'s super class is %@(%p)\n🙈%@'s meta class is %@(%p)\n🙈Meta class's super class is %@(%p)"</span>, <span class="keyword">self</span>, [<span class="keyword">self</span> class], [<span class="keyword">self</span> class],</span><br><span class="line">        [<span class="keyword">self</span> class], [<span class="keyword">self</span> superclass], [<span class="keyword">self</span> superclass],</span><br><span class="line">        [<span class="keyword">self</span> superclass], [[<span class="keyword">self</span> superclass] superclass], [[<span class="keyword">self</span> superclass] superclass],</span><br><span class="line">        [<span class="keyword">self</span> superclass], object_getClass([<span class="keyword">self</span> superclass]), object_getClass([<span class="keyword">self</span> superclass]), [object_getClass([<span class="keyword">self</span> superclass]) superclass], [object_getClass([<span class="keyword">self</span> superclass]) superclass]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 走虚线</span></span><br><span class="line">    Class currentClass = [<span class="keyword">self</span> class];</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name = class_getName(currentClass);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"\n🙉🙊Following the isa pointer %d times's class is %s(%p)"</span>, i, name, currentClass);</span><br><span class="line">        currentClass = object_getClass(currentClass);</span><br><span class="line">        name = class_getName(currentClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="/images/runtime_9.png" alt="runtime_9"></p>
<ul>
<li>self是个object，地址为<code>0x10020dbe0</code>x</li>
<li>self的类是MyClass，地址为<code>0x100004640</code></li>
<li>MyClass的父类是NSObject，地址为<code>0x7fff7542c0f0</code></li>
<li>NSObject的父类是nil</li>
<li>NSObject的元类是NSObject，地址为<code>0x7fff7542c118</code></li>
<li>NSObject的元类的父类是NSObject，地址为    <code>0x7fff7542c0f0</code></li>
<li>MyClass的元类是MyClass，地址为<code>0x100004668</code></li>
<li>MyClass的元类的父类是NSObject，地址为<code>0x7fff7542c118</code></li>
<li>MyClass的元类的元类是NSObject，地址为<code>0x7fff7542c118</code></li>
</ul>
<p>是不是绕晕了，用图表示一下：</p>
<p><img src="../images/runtime_10.png" alt="runtime_10"></p>
<p>好了，下一篇来讲讲runtime的应用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="id">id</h3><p>首先从<code>id</code>说起，Objective-C中id是个可以指向任何OC对象的指针，我们来看看它的结构</p>
<figure class="highlight thrift"><table><tr><td class]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Objective-C Runtime之消息]]></title>
    <link href="http://yoursite.com/2016/02/03/Objective-C%20Runtime%E4%B9%8B%E6%B6%88%E6%81%AF/"/>
    <id>http://yoursite.com/2016/02/03/Objective-C Runtime之消息/</id>
    <published>2016-02-02T16:00:00.000Z</published>
    <updated>2016-02-05T08:37:17.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Method&amp;Message">Method&amp;Message</h3><p>什么是Method？  </p>
<p>方法就是一个类中有名字的一串代码，平常我们写的<br><code>- (int)func:(NString *)str { ... }</code>就是一个方法，但是它在编译的时候会被转换成C函数调用，<br><code>static int func(SomeClass *self, SEL _cmd, NSString *str) { ... }</code>，也就是说，所谓的方法实际上就是C函数。</p>
<p>从<code>static int func(SomeClass *self, SEL _cmd, NSString *str) { ... }</code>就可以明白为什么我们可以使用<code>self</code>和<code>_cmd</code>，因为他们在源码中是隐藏的，self代表着receiver，_cmd代表调用选择器selector。</p>
<p>什么是Message？  </p>
<p>消息是Objective-C中的核心，必须借助于runtime系统才能完成。当我们不了解runtime的时候，一个简单的<code>[receiver message]</code>往往会被认为是函数调用，实际上它仅仅是在编译期间确定了要向receiver这个接收者发送message消息，而receiver如何响应这条消息，编译阶段是无法知晓的，这个要到运行的时候来判断了。</p>
<p>平常我们调用的<code>[self func:@&quot;呵呵哒&quot;];</code>会在编译期间被转化为<code>objc_msgSend(self, @selector(func:), @&quot;呵呵哒&quot;;</code>，也就是说，OC中发送消息会被转化为<code>objc_msgSend</code>。  </p>
<p>那么，我们是否可以直接调用<code>objc_msgSend</code>来发送消息呢？理论上是可以的，虽然苹果极力不推荐。实际上编译器为了更好地进行错误判断，会执行严格的类型检查，也就是说，如果我们直接编写以上代码，会通不过编译，假如我们非要这么做，可以将编译选项<em>Enable Strict Checking of objc_msgSend Calls</em>设置为<em>NO</em>，或者将代码修改为<code>((int (*)(id, SEL, NSString *))objc_msgSend)(self, @selector(func:), @&quot;呵呵哒&quot;;</code>，就可以了。</p>
<p>好了，无图无真相，下面就让我们用实验证明一下。</p>
<p>首先我们新建了一个<code>Command Line Tool</code> Application，然后新建了一个名为MyClass的类，填写以下代码：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">"MyClass.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span></span></span><br><span class="line"></span><br><span class="line">- (instancetype)init</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        [<span class="keyword">self</span> func:<span class="string">@"呵呵哒"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">int</span>)func:(<span class="built_in">NSString</span> *)str</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>然后我们使用<code>clang -rewrite-objc MyClass.m</code>命令将OC代码转换为C++代码，这会在同目录下生成<code>MyClass.cpp</code>的C++文件，用vim打开打开，跳转到10万行左右，可以看到</p>
<p><img src="/images/runtime_2.png" alt="runtime_2"></p>
<p><code>[self func:@&quot;呵呵哒&quot;];</code>的确被转换成了<code>static int _I_MyClass_func_(MyClass * self, SEL _cmd, NSString *func)</code>。</p>
<h3 id="objc_msgSend">objc_msgSend</h3><p>objc_msgSend可能是iOS app运行时被调用的最多的函数了，那么它都干了什么？很可惜，为了提高调用速度，它是用汇编实现的。不过我们仍然可以通过源码来窥知一二。我们打开runtime源码然后搜索.s，.s是汇编文件的后缀</p>
<p><img src="/images/runtime_3.png" alt="runtime_3"></p>
<p>可以看到，不同平台msg的实现是不一样的，这里我们选择X86_64的，扎到objc_msgSend的实现如下：</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span> id objc_msgSend(id self, SEL	_cmd,...);</span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>/</span><br><span class="line">	</span><br><span class="line">	ENTRY	_objc_msgSend</span><br><span class="line">	DW_START _objc_msgSend</span><br><span class="line"></span><br><span class="line">// check whether selector is ignored</span><br><span class="line">// 检查selector是否可以忽略</span><br><span class="line">	cmpq    $ kIgnore, %a2</span><br><span class="line">	// 如果可以忽略，直接返回self</span><br><span class="line">	je      LMsgSendReturnSelf	// ignore and return self</span><br><span class="line"></span><br><span class="line">// check whether receiver is nil </span><br><span class="line">// 检查消息接收者是否是nil</span><br><span class="line">	testq	%a1, %a1</span><br><span class="line">	// 跳转响应的处理</span><br><span class="line">	je	LMsgSendNilSelf</span><br><span class="line"></span><br><span class="line">// receiver (in %a1) is non-nil: search the cache</span><br><span class="line">// 如果接收者不是nil，则查找这个selector，先从缓存中找</span><br><span class="line"></span><br><span class="line">// 缓存命中</span><br><span class="line">LMsgSendReceiverOk:</span><br><span class="line">	// 获取它的isa指针，确定它的类</span><br><span class="line">	movq	isa(%a1), %r11		// class = self-&gt;isa</span><br><span class="line">	CacheLookup %a2, _objc_msgSend</span><br><span class="line">	// CacheLookup placed method in r11</span><br><span class="line">	movq	method_imp(%r11), %r11</span><br><span class="line">	cmp	%r11, %r11		// set nonstret (eq) for </span><br><span class="line">forwarding</span><br><span class="line">	// 找到了selector，跳转到函数实现去执行</span><br><span class="line">	jmp	<span class="keyword">*</span>%r11			// goto <span class="keyword">*</span>imp</span><br><span class="line"></span><br><span class="line">// cache miss: go search the method lists</span><br><span class="line">// 缓存没有找到，搜索方法列表</span><br><span class="line">LCacheMiss_objc_msgSend:</span><br><span class="line">	MethodTableLookup isa(%a1), %a2, _objc_msgSend</span><br><span class="line">	// MethodTableLookup placed IMP in r11</span><br><span class="line">	cmp	%r11, %r11		// set nonstret (eq) for </span><br><span class="line">// 在方法列表中找到了selector，跳转到函数实现去执行</span><br><span class="line">forwarding</span><br><span class="line">	jmp	<span class="keyword">*</span>%r11			// goto <span class="keyword">*</span>imp</span><br><span class="line"></span><br><span class="line">// message sent to nil: redirect to nil receiver, if any</span><br><span class="line">// 消息是否发送给nil及之后的处理</span><br><span class="line">LMsgSendNilSelf:</span><br><span class="line">	movq	__objc_nilReceiver(%rip), %a1</span><br><span class="line">	// 接收者不是nil</span><br><span class="line">	testq	%a1, %a1		// if (receiver != nil)</span><br><span class="line">	// 跳转到之后的处理</span><br><span class="line">	jne	LMsgSendReceiverOk	//   send to new receiver</span><br><span class="line"></span><br><span class="line">	// message sent to nil - return 0</span><br><span class="line">	// 接收者是nil，直接返回0</span><br><span class="line">	movq	$0, %rax</span><br><span class="line">	movq	$0, %rdx</span><br><span class="line">	xorps	%xmm0, %xmm0</span><br><span class="line">	xorps	%xmm1, %xmm1</span><br><span class="line">	ret</span><br><span class="line">	</span><br><span class="line">LMsgSendReturnSelf:</span><br><span class="line">	movq	%a1, %rax</span><br><span class="line">	ret</span><br><span class="line"></span><br><span class="line">LMsgSendExit:</span><br><span class="line">	DW_END 		_objc_msgSend</span><br><span class="line">	END_ENTRY	_objc_msgSend</span><br></pre></td></tr></table></figure>
<p>通过汇编大致可以知道objc_msgSend的具体步骤：</p>
<ol>
<li>检查selector是否可以忽略<ul>
<li>可以忽略，返回self</li>
<li>不可以忽略，跳转到2</li>
</ul>
</li>
<li>检查消息接收者是否是nil<ul>
<li>不是nil，跳转到3</li>
<li>是nil，直接返回0</li>
</ul>
</li>
<li>手先从缓存中查找selector  <ul>
<li>如果缓存命中，则执行它的imp</li>
<li>如果没有找到缓存，跳转到4</li>
</ul>
</li>
<li>先从本类的方法列表中找（或者<code>dispatch table</code>即分发表）<ul>
<li>如果找到，则执行它的imp，同时以selector为key，imp的地址为value存入缓存<ul>
<li>如果没找到，则通过isa指针继续查找其父类的分发表直到根类NSObject</li>
</ul>
</li>
</ul>
</li>
<li>如果到NSObject还没有找到，则执行<strong>动态方法决议</strong></li>
<li><p>动态方法决议是个很重要的流程，接下来会重点讲</p>
<p> 整个过程可用下图表示</p>
</li>
</ol>
<p><img src="/images/runtime_4_1.png" alt="runtime_4_1"></p>
<h3 id="动态方法决议（Dynamic_Method_Resolution）">动态方法决议（Dynamic Method Resolution）</h3><p>上面提到了，当到NSObject还没有找到selector的时候，就进入了<strong>动态方法决议</strong>，简单的说就是当我们无法找到匹配的方法实现时，runtime允许我们在运行期间动态地添加一个方法。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)aSEL &#123;</span><br><span class="line">    <span class="keyword">if</span> (aSEL == <span class="keyword">@selector</span>(resolveThisMethodDynamically)) &#123;</span><br><span class="line">    	class_addMethod([<span class="keyword">self</span> class], aSEL, (IMP)dynamicMethodIMP, <span class="string">"v@:"</span>);</span><br><span class="line">    	<span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:aSEL];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> dynamicMethodIMP(<span class="keyword">id</span> <span class="keyword">self</span>, SEL _cmd) &#123;</span><br><span class="line">    <span class="comment">// implementation ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们主要做了以下几件事</p>
<ul>
<li>实现<code>+resolveInstanceMethod:</code>或者<code>+resolveClassMethod:</code></li>
<li>检查selector是不是我们想要处理的方法  <ul>
<li>匹配，则通过<code>class_addMethod</code>添加一个方法并返回YES，可以看到添加的方法是一个简单的C函数</li>
<li>不匹配，调用super处理 </li>
</ul>
</li>
<li>注意如果我们不提供一个实现直接返回会抛出<code>NSInvalidArgumentException</code>异常</li>
</ul>
<h3 id="消息转发（Message_Forwarding）">消息转发（Message Forwarding）</h3><p>如果动态方法决议还没有解决，则进入了消息转发流程，可分为快速转发和标准转发。</p>
<h4 id="快速转发（Fast_Forwarding）">快速转发（Fast Forwarding）</h4><p>通过快速转发我们可以将消息快速地转发给另一个对象，或者忽略，但是我们无法在快速转发中改写消息。</p>
<p>下面是一个简单的示例</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (id)<span class="string">forwardingTargetForSelector:</span>(SEL)aSelector &#123;</span><br><span class="line">    <span class="keyword">if</span> (aSelector == <span class="annotation">@selector</span>(<span class="string">foo:</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> anotherObject;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> <span class="string">forwardingTargetForSelector:</span>aSelector];;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们主要做了以下三件事：</p>
<ul>
<li>实现<code>-forwardingTargetForSelector:</code></li>
<li>检查selector是否是我们想要处理的方法<ul>
<li>匹配，转发给能够处理该消息的对象</li>
<li>不匹配，调用super处理</li>
</ul>
</li>
</ul>
<h4 id="标准转发（Normal_Forwarding）">标准转发（Normal Forwarding）</h4><p>快速转发之后就是标准转发，通过标准转发我们可以完整的实现转发流程，在错误之前给了我们最后一次机会。</p>
<p>runtime系统首先会调用<code>-methodSignatureForSelector:</code>去获取方法签名，然后使用方法签名去创建<code>NSInvocation</code>对象，它封装了原始消息和参数；接着<code>-forwardInvocation:</code>被调用，使用新创建的NSInvocation作为参数，默认的<code>-forwardInvocation:</code>会发送<code>-doesNotRecognizeSelector</code>消息抛出异常，因此我们必须覆写<code>-forwardInvocation:</code>，同时也要覆写<code>-methodSignatureForSelector:</code>去生成一个方法签名。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- (NSMethodSignature *)<span class="string">methodSignatureForSelector:</span>(SEL)selector &#123;</span><br><span class="line">    NSMethodSignature *signature = [<span class="keyword">super</span> <span class="string">methodSignatureForSelector:</span>selector];</span><br><span class="line">    <span class="keyword">if</span> (!signature) &#123;</span><br><span class="line">        signature = [anotherObject <span class="string">methodSignatureForSelector:</span>selector];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> signature;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="typename">void</span>)<span class="string">forwardInvocation:</span>(NSInvocation *)anInvocation &#123;</span><br><span class="line">    <span class="keyword">if</span> ([anotherObject <span class="string">respondsToSelector:</span></span><br><span class="line">         [anInvocation selector]]) &#123;</span><br><span class="line">        [anInvocation <span class="string">invokeWithTarget:</span>anotherObject];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="keyword">super</span> <span class="string">forwardInvocation:</span>anInvocation];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="错误">错误</h3><p>如果动态方法决议和消息转发都没有解决，那只好抛出异常。runtime会发送<code>-doesNotRecognizeSelector:</code>消息，接着抛出<code>NSInvalidArgumentException</code>异常，整个过程也就结束了。</p>
<p>下面我们用实验证明一下。</p>
<p>我们调用了MyClass的foo方法，而foo声明了之后并没有实现，然后我们在可能发送异常的地方打个断点，运行到断点处的时候，我们在控制台输入<code>call (void)instrumentObjcMessageSends(YES)</code>，表示我们要记录之后发送的消息：</p>
<p><img src="/images/runtime_5.png" alt="runtime_5"></p>
<p>接着继续执行，程序会抛出异常，然后打开<code>/private/tmp</code>目录，打开最新的以<code>msgSends-pid</code>命名的文件</p>
<p><img src="/images/runtime_6.png" alt="runtime_6"></p>
<p>可以看到，依次按照以下顺序发送消息</p>
<ul>
<li><code>-resolveInstanceMethod:</code></li>
<li><code>-forwardingTargetForSelector:</code></li>
<li><code>-methodSignatureForSelector:</code></li>
<li><code>-forwardInvocation:</code></li>
<li><code>-doesNotRecognizeSelector:</code></li>
</ul>
<p>这里由于<code>-methodSignatureForSelector:</code>没有获取到有效签名，因此<code>-forwardInvocation:</code>消息并没有发送。</p>
<p>综上，可以用如下这张图来描述整个过程</p>
<p><img src="/images/runtime_7.png" alt="runtime_7"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Method&amp;Message">Method&amp;Message</h3><p>什么是Method？  </p>
<p>方法就是一个类中有名字的一串代码，平常我们写的<br><code>- (int)func:(NString *)str { ... ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Objective-C Runtime之概览]]></title>
    <link href="http://yoursite.com/2016/02/01/Objective-C%20Runtime%E4%B9%8B%E6%A6%82%E8%A7%88/"/>
    <id>http://yoursite.com/2016/02/01/Objective-C Runtime之概览/</id>
    <published>2016-01-31T16:00:00.000Z</published>
    <updated>2016-02-03T14:03:24.000Z</updated>
    <content type="html"><![CDATA[<p>什么，你和我说runtime，大多数iOS程序员听到runtime的时候，脑子里第一反映便是，这货太特么抽象难理解了，而且工作中不常用到。的确，我也是这么认为的，Objective-C里两大最难的点当属Runtime和Runloop。然而，难虽难，这硬骨头还是要啃啊，不然理解不到这门语言的精髓呀。</p>
<p>我们都知道，Objective-C这门语言是动态的，是扩充于C的面向对象语言，所谓动态的核心就是<code>Runtime</code>。平常写程序的时候，它被系统加载进去，然后在幕后默默工作着，我们甚至察觉不到它的存在。但是，假如没有它，OC就运行不了了。也就是说，<code>C + Runtime = Objctive-C</code>。</p>
<h1 id="runtime-h">runtime.h</h1><p>runtime是开源的，我们可以在<a href="https://opensource.apple.com/tarballs/objc4/" target="_blank" rel="external">https://opensource.apple.com/tarballs/objc4/</a>下载。</p>
<p>runtime.h里声明了以下开头的函数，我们通过观察类的命名可以发现：</p>
<ul>
<li><code>objc_...</code><br>和runtime一些属性设置有关。比如<ul>
<li>类相关<br>创建一个类（<em>objc_allocateClassPair</em>）、注册该类（<em>objc_registerClassPair</em>）、销毁该类（<em>objc_disposeClassPair</em>）、指定类名返回该类（<em>objc_getClass</em>）、指定类名返回该类元类（<em>objc_getMetaClass</em>）、获取注册的类的列表（<em>objc_getClassList</em>或者<em>objc_copyClassList</em>）等</li>
<li>对象相关<br>设置关联对象（<em>objc_setAssociatedObject</em>），获取关联对象（<em>objc_getAssociatedObject</em>）等。</li>
<li>协议相关<br>创建一个协议（<em>objc_allocateProtocol</em>）、注册该协议（<em>objc_registerProtocol</em>）、指定协议名字获取协议（<em>objc_getProtocol</em>）、运行时所有的协议名（<em>objc_copyProtocolList</em>）等。</li>
</ul>
</li>
<li><p><code>class_...</code><br>和类相关。<br>比如获取类名（<em>class_getName</em>）、为类添加一个新的方法（<em>class_addMethod</em>）、获取类对应选择器的方法描述Method（<em>class_getClassMethod</em>）、获取类的变量列表（<em>class_copyIvarList</em>）、属性列表（<em>class_copyPropertyList</em>）、协议列表（<em>class_copyProtocolList</em>）、方法列表（<em>class_copyMethodList</em>）等。</p>
</li>
<li><p><code>object_..</code><br>和对象相关。<br>比如获取对象的类名（<em>object_getClassName</em>）、获取对象某个变量的值（<em>object_getIvar</em>）等。</p>
</li>
<li><p><code>method_...</code><br>和方法描述有关。<br>比如获取方法名SEL（<em>method_getName</em>）、方法的实现IMP（<em>method_getImplementation</em>）、参数和返回参数的类型编码（<em>method_getTypeEncoding</em>）等。</p>
</li>
<li><p><code>ivar_...</code><br>和变量有关。<br>比如获取变量名（<em>ivar_getName</em>）、实例变量的类型编码（<em>ivar_getTypeEncoding</em>）等。</p>
</li>
<li><p><code>property_...</code><br>和属性方法有关。<br>比如获取属性名（<em>property_getName</em>）、属性的编码（<em>property_getAttributes</em>）等。</p>
</li>
<li><p><code>protocol_...</code><br>和协议有关。<br>比如获取协议名（<em>protocol_getName</em>）、协议的方法描述（protocol_getMethodDescription）、判断某个协议是否实现另一个协议（<em>protocol_conformsToProtocol</em>）等。</p>
</li>
<li><p><code>sel_...</code><br>和方法选择器selectors有关。<br>比如获取选择器的名字（<em>sel_getName</em>）、注册一个选择器（<em>sel_registerName</em>或者<em>sel_getUid</em>）等。</p>
</li>
<li><p><code>imp_...</code><br>和方法的实现有关。<br>比如用block实现某selector的具体实现（<em>imp_implementationWithBlock</em>）等</p>
</li>
</ul>
<h1 id="foundation-h">foundation.h</h1><p><code>Foundation</code>是一个framework，它定义了OC类的基础。其中，NSObject类是Cocoa里大部分类的基类，它定义了一些基础的方法，比如<code>description</code>方法，NSObject对这个方法的实现仅仅是返回对象的名字和地址，我们可以通过覆写该方法来返回更多的信息。</p>
<p>除了实现了一些基本的方法，NSObject也定义了部分的runtime接口：</p>
<ul>
<li><code>- (Class)class;</code></li>
<li><code>- (BOOL)isKindOfClass:(Class)class;</code></li>
<li><code>- (BOOL)isMemberOfClass:(Class)aClass;</code></li>
<li><code>- (BOOL)respondsToSelector:(SEL)selector;</code></li>
<li><code>+ (BOOL)instancesRespondToSelector:(SEL)aSelector;</code></li>
<li><code>- (id)performSelector:(SEL)selector;</code></li>
<li><code>- (IMP)methodForSelector:(SEL)aSelector;</code></li>
<li><code>+ (IMP)instanceMethodForSelector:(SEL)aSelector;</code></li>
<li><code>- (void)doesNotRecognizeSelector:(SEL)aSelector;</code></li>
<li><code>- (BOOL)conformsToProtocol:(Protocol *)aProtocol;</code></li>
<li><code>+ (BOOL)conformsToProtocol:(Protocol *)protocol;</code></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>什么，你和我说runtime，大多数iOS程序员听到runtime的时候，脑子里第一反映便是，这货太特么抽象难理解了，而且工作中不常用到。的确，我也是这么认为的，Objective-C里两大最难的点当属Runtime和Runloop。然而，难虽难，这硬骨头还是要啃啊，不然理]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[你必须了解的Xcode调试技巧]]></title>
    <link href="http://yoursite.com/2016/01/28/%E4%BD%A0%E5%BF%85%E9%A1%BB%E4%BA%86%E8%A7%A3%E7%9A%84Xcode%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2016/01/28/你必须了解的Xcode调试技巧/</id>
    <published>2016-01-27T16:00:00.000Z</published>
    <updated>2016-01-30T09:27:38.000Z</updated>
    <content type="html"><![CDATA[<p>我们开发iOS或者OSX程序时候，调试是避免不了的，而调试最大的一个利器就是断点。接下来我介绍一下Xcode一些常用的和不常用的技巧。</p>
<h4 id="条件断点">条件断点</h4><p>如下图，这是个最基本的断点，我们写了一个0到10000的循环，需要在循环到5000的时候打个断点。</p>
<p><img src="/images/debug_1.png" alt="debug_1"></p>
<p>我们在Condition里填写我们的条件，这样当idx=5000的时候程序就会停在这里。</p>
<h4 id="高级log术">高级log术</h4><p>经常在调试程序的时候，我们需要在程序里面打印一些东西，最常用的就是NSLog，但是NSLog有几个缺点</p>
<ul>
<li>NSLog会拖慢运行速度，效率低</li>
<li>大量log导致代码混乱</li>
<li>最重要的一点，假如我们在程序运行的时候想要打印某些信息，这个时候我们可能会想到使用<code>po</code>，这个在打印单个信息的时候很有用，但是比如在上面我们的循环里面，我需要知道每次偶数的时候的idx是多少，那就不得不在编写完后重新编译运行，很麻烦。</li>
</ul>
<p>那么怎么办呢，还是在条件断点里面设置</p>
<p><img src="/images/debug_2.png" alt="debug_2"></p>
<p>我们首先设置条件为偶数，然后再在Action里面选择<code>Debug Command</code>，这和允许我们直接使用<code>lldb</code>或者<code>gdb</code>的命令进行调试，这里我们使用<code>po idx</code>打印出idx的值，表示当满足偶数条件的时候打印。接下来最重要的就是勾选下面那个<code>Automatically continue after evaluating</code>选项，表示在执行动作之后不暂停程序继续运行。</p>
<p><img src="/images/debug_3.png" alt="debug_3"></p>
<p>可以看到，Xcode乖乖地打印除了0到10000的偶数。</p>
<p>假如我们需要输出一些信息，也好办，点击Action右边的加号，添加动作，这次我们选择<code>Log Message</code>，这里可以写下我们需要输出的信息，可以选择在控制台输出或者语音播放，或者也可以再添加一个动作，选择<code>Sound</code>，内置丰富的声音，在您调试的时候也能够享受美妙的交响乐。</p>
<p><img src="/images/debug_4.png" alt="debug_4"></p>
<p>查看输出，同时伴有frog的叫声</p>
<p><img src="/images/debug_5.png" alt="debug_5"> </p>
<h4 id="高级log术的其他用途">高级log术的其他用途</h4><p>平时我们查看调用堆栈的时候都是打个断点然后在Xcode左侧的Debug栏查看，或者在命令行输入lldb命令<code>bt</code>，但是有时候我们不想要程序暂停，这个时候我们就可以使用条件断点的<code>Automatically continue after evaluating</code>，同样，在Action里选择<code>Debug Command</code>，然后输入<code>bt</code>或者<code>bt 10</code>，表示只输出10个frame的调用堆栈。</p>
<p><img src="/images/debug_6.png" alt="debug_6"></p>
<p><code>-viewWillAppear:</code>的调用堆栈如下（只输出了10个frame）</p>
<p><img src="/images/debug_7.png" alt="debug_7"></p>
<p>也可以使用<code>dis -f</code>显示运行时的反汇编代码</p>
<p><img src="/images/debug_8.png" alt="debug_8"></p>
<h4 id="符号断点（Symbolic_BreakPoints）">符号断点（Symbolic BreakPoints）</h4><p><code>Symbolic BreakPoints</code>我们可能用得比较少，但其实它是个神器，用于我们想要在某个方法触发的时候打断点，尤其是当我们使用了第三方库或者framework等我们无法直接在方法里打断点的情况。</p>
<p>好了，假如我们想要在每个<code>-viewDidLoad:</code>执行的时候，打断点，要怎么做呢，首先我们得见一个符号断点</p>
<p><img src="/images/debug_9.png" alt="debug_9"></p>
<p>然后在<code>Symbol</code>里填写我们要追踪的方法，这里填写<code>-[UIViewController viewWillAppear:]</code>。这样，当每次执行到的时候，都会停下来，便于我们分析调试。</p>
<p><img src="/images/debug_10.png" alt="debug_10"></p>
<p>Xcode停留在了第一个断点处</p>
<p><img src="/images/debug_11.png" alt="debug_11"></p>
<p>或者，我们直接输入<code>viewDidLoad</code>，运行，观察Xcode的反应</p>
<p><img src="/images/debug_12.png" alt="debug_12"></p>
<p>执行之后Xcode断点下</p>
<p><img src="/images/debug_13.png" alt="debug_13"></p>
<p>从上图中可以看到，Xcode将程序运行时候所有类中执行到该方法的地方都标记了断点，其中有很多系统类，等于自动<code>class_dump</code>出来了。</p>
<h4 id="全局断点，捕捉程序运行时候的全部异常。">全局断点，捕捉程序运行时候的全部异常。</h4><p>添加断点的时候选择选择<code>Add Exception Breakpoint</code></p>
<p><img src="/images/debug_14.png" alt="debug_14"></p>
<p>然后在编辑的时候我们可以选择捕捉全部或者Objective-C或者C++的异常，一般情况下我们保持默认，这样当出现crash的时候就会停留在相应的代码处了。</p>
<p><img src="/images/debug_15.png" alt="debug_15"></p>
<p>开发程序时，巧妙地利用Xcode强大的调试技巧，可以达到事半功倍的效果。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们开发iOS或者OSX程序时候，调试是避免不了的，而调试最大的一个利器就是断点。接下来我介绍一下Xcode一些常用的和不常用的技巧。</p>
<h4 id="条件断点">条件断点</h4><p>如下图，这是个最基本的断点，我们写了一个0到10000的循环，需要在循环到50]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ARC与MRC必知必会]]></title>
    <link href="http://yoursite.com/2016/01/26/ARC%E4%B8%8EMRC%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A/"/>
    <id>http://yoursite.com/2016/01/26/ARC与MRC必知必会/</id>
    <published>2016-01-25T16:00:00.000Z</published>
    <updated>2016-01-30T05:56:25.000Z</updated>
    <content type="html"><![CDATA[<p>我们习惯将ARC的每个字母分开读即读A R C，但是实际上正式的叫法叫<code>ɑ:k</code>，即啊克。好了，下面开始进入正题，谈谈ARC与MRC有什么不同。</p>
<h4 id="ARC下的autorelease_pool">ARC下的autorelease pool</h4><p>ARC下最明显的就是对autorelease pool的改进。</p>
<p>Autorelease pool会自动管理对象的生命周期，每个发送<code>autorelease</code>消息的对象不会马上被释放，它们会被加入到NSAutoreleasePool中，当pool被drain的时候，它会依次给池子中的每个对象发送<code>release</code>消息。因此，使用autorelease管理内存的对象的生命周期被延长了。</p>
<p>MRC下main函数是这么写的</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSAutoreleasePool</span> *pool = [[<span class="built_in">NSAutoreleasePool</span> alloc] init];</span><br><span class="line">    <span class="keyword">int</span> retVal = <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="literal">nil</span>, <span class="literal">nil</span>);</span><br><span class="line">    [pool release];</span><br><span class="line">    <span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ARC下，我们不需要直接管理autorelease pool了，使用@autorelease即可，并且比NSAutoreleasePool更高效。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="literal">nil</span>, <span class="built_in">NSStringFromClass</span>([AppDelegate class]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么@autoreleasepool到底干啥了呢，文档上是这样说的</p>
<blockquote>
<p> On entry, an autorelease pool is pushed. On normal exit (break, return, goto, fall-through, and so on) the autorelease pool is popped</p>
</blockquote>
<p>意思是说在@autoreleasepool入口处，一个autorelease pool会被push进去，出口处会被pop出来。实际上通过断点查看反汇编代码可以发现，所谓的push是调用了<code>objc_autoreleasePoolPush</code>，pop是调用了<code>objc_autoreleasePoolPop</code>。</p>
<h4 id="ARC下对象的创建和使用">ARC下对象的创建和使用</h4><p>MRC下，我们创建一个对象并且使用完的时候，必须释放它。以数组为例</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSArray *<span class="built_in">array</span> = [[NSArray alloc] initWithObjects:<span class="literal">nil</span> <span class="built_in">count</span>:<span class="number">0</span>];</span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line">[<span class="built_in">array</span> release];   <span class="comment">// 使用完了，释放</span></span><br></pre></td></tr></table></figure>
<p>或者直接使用<code>+array</code>方法</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSArray *<span class="built_in">array</span> = [NSArray <span class="built_in">array</span>];</span><br></pre></td></tr></table></figure>
<p>因为这里<code>Foundation</code>内部已经为我们的<code>+array</code>方法自动添加了autorelease，即内部可能是这样实现的</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype)<span class="built_in">array</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [[[self alloc] initWithObjects:<span class="literal">NULL</span> count:<span class="number">0</span>] autorelease];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其他诸如<code>NSDictionary</code>的<code>+dictionary</code>或者<code>NSString</code>的<code>+stringWithFormat:</code>也是类似。</p>
<p>ARC下我们只管使用就好了，不管使用alloc还是类方法，不需要手写release，autorelease，ARC会在合适的地方自动插上。</p>
<p>同理，ARC下我们已经习惯的初始化赋值方法</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.array = <span class="comment">[<span class="comment">[NSArray alloc]</span> init]</span>;</span><br></pre></td></tr></table></figure>
<p>实际上ARC隐式转化为</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.array = <span class="comment">[<span class="comment">[<span class="comment">[NSArray alloc]</span> init]</span> autorelease]</span>;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NSArray *tempArray = [[NSArray alloc] init]<span class="comment">;</span></span><br><span class="line">self.array = tempArray<span class="comment">;</span></span><br><span class="line">[tempArray release]<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h4 id="ARC下的属性修饰符">ARC下的属性修饰符</h4><p>ARC新增了几个属性修饰符</p>
<ul>
<li><p><code>__strong</code></p>
<p>  ARC下，默认所有的栈变量都是strong类型，这个属性和retain一样，并且假如我们没有为其赋值，会自动初始化为nil。</p>
<p>  <code>NSString *name;</code><br>  实际上它等于拥有了以下属性<br>  <code>__strong NSString *name = nil;</code></p>
</li>
<li><p><code>__weak</code></p>
<p>  不会增加对象的引用计数，当指向的对象被释放时，自动置为nil。ARC下替代MRC下delegate的assign方法，既可以打破循环引用又可以避免野指针造成的crash。</p>
</li>
<li><p><code>__unsafe_unretained</code></p>
<p>  字面意思unretained表示不会增加对象的引用计数，unsafe表示当指向的对象被释放时，该指针就成为野指针了，因此是不安全的。</p>
</li>
<li><p><code>__autoreleasing</code></p>
<p>  类似@autorelease，被修饰的对象被设置为自动释放，一般被用于参数传递，比如</p>
  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="typename">void</span>)<span class="string">save:</span>(NSError * __autoreleasing *)error</span><br><span class="line">&#123;</span><br><span class="line">    *error = [[NSError alloc] <span class="string">initWithDomain:</span>@<span class="string">"123"</span> <span class="string">code:</span><span class="number">0</span> <span class="string">userInfo:</span>nil];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  这样我们就不需要管理error的内存了，因为已经被设置成自动释放，相当于如下代码，否则会造成内存泄露。</p>
  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*error = [[[NSError alloc] <span class="string">initWithDomain:</span>@<span class="string">"123"</span> <span class="string">code:</span><span class="number">0</span> <span class="string">userInfo:</span>nil] autorelease];</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="ARC下存取器@property">ARC下存取器@property</h4><p>先看看MRC下我们手写存取器的例子</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, retain) <span class="built_in">NSNumber</span> *count;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyClass</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSNumber</span> *)count &#123;</span><br><span class="line">    <span class="keyword">return</span> _count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setCount:(<span class="built_in">NSNumber</span> *)newCount &#123;</span><br><span class="line">    <span class="keyword">if</span> (_count != newCount) &#123;</span><br><span class="line">        _count = [newCount retain];</span><br><span class="line">        [_count release];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>我们可以看到，getter方法没有变化，仅仅是返回变量的值；setter方法做了两件事：</p>
<ul>
<li><p>retain新值<br>retain新值是因为我们无法知道新的值在什么时候被释放，我们必须确保在使用的时候它没有被释放，因此我们必须持有它。</p>
</li>
<li><p>释放旧值<br>释放旧值是因为如果不释放，旧值就会失去对象对它的引用，我们就再也无法访问到旧值了，因此也就无法释放它，最终导致内存泄露。</p>
</li>
</ul>
<p>注意那个判断是因为，假如新值和旧值是同一对象，就会导致自己retain自己。</p>
<p>ARC下，很简单，直接按照逻辑来写，不用管复杂的新值旧值了</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> (<span class="constant">NSNumber</span> *)count &#123;</span><br><span class="line"></span>    return _count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-<span class="ruby"> (void)<span class="symbol">setCount:</span>(<span class="constant">NSNumber</span> *)newCount &#123;</span><br><span class="line"></span>    _count = newCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ARC下函数返回值">ARC下函数返回值</h4><p>MRC的时候，对象在函数内部创建并返回的时候，我们必须要放弃对其的所有权。但是如果我们直接使用release，对象会在返回的时候立即被释放，这个时候我们就必须使用autorelease延迟的它的释放时机，这样，调用者仍旧可以使用返回的对象，并且使用完之后会被安全的释放而不会内存泄露</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)fullName &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *string = [[[<span class="built_in">NSString</span> alloc] initWithFormat:<span class="string">@"%@ %@"</span>, <span class="keyword">self</span><span class="variable">.firstName</span>, <span class="keyword">self</span><span class="variable">.lastName</span>] autorelease];	</span><br><span class="line">    <span class="comment">// 没有autorelease就会导致内存泄露，因为调用者使用完之后得不到释放</span></span><br><span class="line">    <span class="keyword">return</span> string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者也可以</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)fullName &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *string = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ %@"</span>,</span><br><span class="line">                                 <span class="keyword">self</span><span class="variable">.firstName</span>, <span class="keyword">self</span><span class="variable">.lastName</span>];</span><br><span class="line">    <span class="keyword">return</span> string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为<code>+stringWithFormat</code>内部自动autorelease，我们已经不再拥有对string的所有权，因此我们可以安全的返回。</p>
<p>但是到了ARC，我们可以不用在写autorelease，只需创建好之后直接返回，ARC在编译的时候会自动帮我们加上。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)fullName &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *string = [[<span class="built_in">NSString</span> alloc] initWithFormat:<span class="string">@"%@ %@"</span>, <span class="keyword">self</span><span class="variable">.firstName</span>, <span class="keyword">self</span><span class="variable">.lastName</span>];	</span><br><span class="line">    <span class="comment">// ARC下直接返回就好了</span></span><br><span class="line">    <span class="keyword">return</span> string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="ARC下的block">ARC下的block</h4><p>ARC和MRC block的类型还是有所区别的。</p>
<p>ARC下创建的block，和其他对象一样，默认是<code>strong</code>类型。当<code>__NSStackBlock__</code>类型的block使用外部变量时，这个block会被copy进堆中，就成为了<code>__NSMallocBlock__</code>（有个例外，直接在参数中传递的block）；如果没有使用外部变量，则是<code>__NSGlobalBlock__</code>。那么有没有办法使它成为<code>__NSStackBlock__</code>呢，可以显式声明block为<code>weak</code>。</p>
<p>MRC</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MRC下，是__NSStackBlock__</span></span><br><span class="line"><span class="keyword">void</span> (^myBlock)(<span class="keyword">int</span> i) = ^(<span class="keyword">int</span> i) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self = %@"</span>, <span class="keyword">self</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"myBlock : %@"</span>, myBlock);</span><br></pre></td></tr></table></figure>
<p>ARC</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ARC下，却是__NSMallocBlock__</span></span><br><span class="line"><span class="keyword">void</span> (^myBlock)(<span class="keyword">int</span> i) = ^(<span class="keyword">int</span> i) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self = %@"</span>, <span class="keyword">self</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"myBlock : %@"</span>, myBlock);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明为weak类型，变回__NSStackBlock__</span></span><br><span class="line">__<span class="keyword">weak</span> <span class="keyword">void</span> (^myBlock)(<span class="keyword">int</span> i) = ^(<span class="keyword">int</span> i) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self = %@"</span>, <span class="keyword">self</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"myBlock : %@"</span>, myBlock);</span><br></pre></td></tr></table></figure>
<p>例外，ARC下，如果使用了外部变量的block直接作为函数参数，这个时候还是<code>__NSStackBlock__</code></p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">[<span class="keyword">self</span> performBlock:^&#123;</span><br><span class="line">    NSLog<span class="list">(<span class="keyword">@</span><span class="string">"self = %@"</span>, self)</span><span class="comment">;</span></span><br><span class="line">&#125;]<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">- <span class="list">(<span class="keyword">void</span>)</span>performBlock:<span class="list">(<span class="keyword">void</span> <span class="list">(<span class="keyword">^</span>)</span><span class="list">()</span>)</span>block</span><br><span class="line">&#123;</span><br><span class="line">    // 这个block是栈block</span><br><span class="line">    NSLog<span class="list">(<span class="keyword">@</span><span class="string">"block: %@"</span>, block)</span><span class="comment">;</span></span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>讨论完ARC和MRC下block的类型，接下来我们来看看ARC中有哪些需要注意的地方以及和MRC相比ARC为我们所做的工作。</p>
<h5 id="先看函数返回值为block的情况。">先看函数返回值为block的情况。</h5><p>  MRC下，copy是因为这里创建的block是个<code>__NSStackBlock__</code>（因为它使用了外部变量<code>i</code>），不copy的话当函数返回时它就被释放了，因此必须将它copy到堆上，也就是成为<code>__NSMallocBlock__</code>。实际上如果我们创建的是<strong>NSGlobalBlock</strong>，这里是可以不用copy的，但是copy总是正确的；autorelease的原因和前面一样，返回对象之后我们必须放弃对其所有权，这样才会被安全释放。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>(^)())getBlock:(<span class="keyword">int</span>)i &#123;</span><br><span class="line">    <span class="keyword">void</span> (^block)() = ^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"a = %@"</span>,  @(i));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"dd"</span>);</span><br><span class="line">    <span class="keyword">return</span> [[block <span class="keyword">copy</span>] autorelease];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ARC下会自动将返回的栈block copy和autorelease，我们不需要手动书写。实际上这个block在ARC下是<code>__NSMallocBlock__</code>，实验结果来看ARC并没有做copy。</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="pp">- <span class="params">(void (^)</span><span class="params">()</span>)getBlock:<span class="params">(int)</span>i &#123;</span><br><span class="line">    // ARC这是个__NSMallocBlock__</span><br><span class="line">    void <span class="params">(^block)</span><span class="params">()</span> = ^&#123;</span><br><span class="line">        NSLog<span class="params">(@<span class="string">"a = %@"</span>, @(i)</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    return block;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h5 id="再看block作为函数参数的情况。">再看block作为函数参数的情况。</h5><p>我们建立了一个类，并且将myBlock作为成员变量，然后初始化方法传入一个block。</p>
<p>MRC下，我们必须copy我们的block，这里原因和block作为返回值类似。假如作为参数传入的block是个<code>__NSStackBlock__</code>，那么当创建block的函数栈返回时，这个block就会被释放，那么当我们使用的时候，就会因为使用了已经释放的对象而crash，而这也是我们使用属性定义block的时候使用copy的原因。</p>
<p><em>例子1：</em></p>
<p>MRC</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyClass</span> : <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span> (^myBlock)(<span class="keyword">int</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@property (nonatomic, copy) void (^myBlock)(int);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line">- (instancetype)initWithBlock:(<span class="keyword">void</span> (^)(<span class="keyword">int</span>))block 	&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        myBlock = [block <span class="keyword">copy</span>];</span><br><span class="line"><span class="comment">//        self.myBlock = blk;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line">    [myBlock release];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">super</span> dealloc];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ARC下，我们只要<code>myBlock = block;</code>就行了，它会为我们自动copy。</p>
<p><em>例子2：</em></p>
<p>我们常用的<code>-performSelector:withObject:afterDelay:</code>方法</p>
<p>MRC</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="typename">int</span> var = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">[self <span class="string">performSelector:</span><span class="annotation">@selector</span>(<span class="string">action:</span>) <span class="string">withObject:</span>[[^(<span class="typename">int</span> i) &#123;</span><br><span class="line">    NSLog(@<span class="string">"result = %@"</span>, @(i+var));</span><br><span class="line">&#125; copy] autorelease] <span class="string">afterDelay:</span><span class="number">1.0</span>];</span><br></pre></td></tr></table></figure>
<p>ARC</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="typename">int</span> var = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">[self <span class="string">performSelector:</span><span class="annotation">@selector</span>(<span class="string">action:</span>) <span class="string">withObject:</span>^(<span class="typename">int</span> i) &#123;</span><br><span class="line">    NSLog(@<span class="string">"result = %@"</span>, @(i+var));</span><br><span class="line">&#125; <span class="string">afterDelay:</span><span class="number">1.0</span>];</span><br></pre></td></tr></table></figure>
<h5 id="block加入数组或集合">block加入数组或集合</h5><p>MRC下block加入数组，copy原因同上，将栈上的block变成堆block；autorelease的原因是数组会对加入其中的对象retain，因此在加入之后必须要释放它</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self.muteArray addObject:<span class="string">[[myBlock copy] autorelease]]</span>;</span><br></pre></td></tr></table></figure>
<p>ARC下，直接add就行了。</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[self.muteArray addObject:myBlock]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h4 id="ARC下的循环引用问题">ARC下的循环引用问题</h4><p>使用block的时候，当A持有block，而block又持有A的时候，就会造成循环引用而相互无法释放。<br>MRC下我们只需要使用<code>__block</code>修饰对象，block就不会retain它</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__block <span class="keyword">id</span> blockSelf = <span class="keyword">self</span>;</span><br><span class="line"><span class="keyword">self</span><span class="variable">.myBlock</span> = ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self = %@"</span>, blockSelf);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>但是在ARC下，即使你的变量使用了<code>__block</code>，仍旧会被retain，因此仍然会循环引用，这个时候就应该使用<code>__weak</code>或者<code>__unsafe_unretained</code>（iOS5以下）了，但是<code>__unsafe_unretained</code>是不安全的，因为当它指向的对象被释放的时候，而这个指针还指着那块被释放的地址，也就是野指针，就会造成crash；而<code>__weak</code>则会在发生这个情况的时候自动将指针置为nil，OC里对nil发消息是可以的。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__<span class="keyword">weak</span> <span class="keyword">id</span> weakSelf = <span class="keyword">self</span>;</span><br><span class="line"><span class="keyword">self</span><span class="variable">.myBlock</span> = ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self = %@"</span>, weakSelf);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">__unsafe_unretained <span class="keyword">id</span> blockSelf = <span class="keyword">self</span>;    <span class="comment">// 不推荐</span></span><br><span class="line"><span class="keyword">self</span><span class="variable">.myBlock</span> = ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self = %@"</span>, blockSelf);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>以下是几点需要注意的循环引用的地方</p>
<ul>
<li>block中使用了属性定义的变量，如<code>self.xxx</code>，block就会retain self，而如果self又retain该block，就会造成循环引用，也是最常见的类型。</li>
<li><p>block中使用了不是使用属性定义的成员变量，默认是strong类型，也会被强引用。这个时候我们就可以使用一个临时变量来存储。</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__<span class="keyword">weak</span> <span class="built_in">NSNumber</span> *tempNum = num;</span><br><span class="line"><span class="built_in">NSUInteger</span> tempCount = count;</span><br><span class="line"><span class="keyword">self</span><span class="variable">.myBlock</span> = ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"value = %@"</span>, tempNum);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"value2 = %@"</span>, @(tempCount));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>delegate的属性修饰符要从assign改为weak，这样既可以打破循环引用又可以避免野指针造成的crash。</p>
</li>
</ul>
<p>当然也并不是一有block我们就要使用弱引用，以下是几个不需要使用weak的地方</p>
<ul>
<li><p>当block不被诸如vc之类的持有时，我们不需要使用weak，比如我定义了一个函数使用block作参数，但是这个block仅仅是参数而没有被我持有。</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传进去的block并没有被self retain，不需要weakSelf</span></span><br><span class="line">[<span class="keyword">self</span> doSomething:^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self = %@"</span>, <span class="keyword">self</span>);</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
</li>
<li><p>GCD中一般情况下不需要使用weakSelf，GCD中block虽然retain了外部的变量，但是我们并不持有该block</p>
</li>
<li>系统的一些诸如动画之类的block，原因同上</li>
</ul>
<h4 id="关于ARC下__block和__weak的区别">关于ARC下<code>__block</code>和<code>__weak</code>的区别</h4><p>ARC下的一些开源库中我们经常能看到<code>__block</code>和<code>__weak</code>一起修饰某个变量，他们两个属性各有各的作用，<code>__weak</code>是为了避免循环引用；<strong>而<code>__block</code>是为了可以修改外部的变量，不是避免循环引用，因为ARC下<code>__block</code>仍然可以retain变量</strong>，不要搞混淆了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们习惯将ARC的每个字母分开读即读A R C，但是实际上正式的叫法叫<code>ɑ:k</code>，即啊克。好了，下面开始进入正题，谈谈ARC与MRC有什么不同。</p>
<h4 id="ARC下的autorelease_pool">ARC下的autorelease p]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[NSOperation和NSOperationQueue]]></title>
    <link href="http://yoursite.com/2016/01/19/NSOperation%E5%92%8CNSOperationQueue/"/>
    <id>http://yoursite.com/2016/01/19/NSOperation和NSOperationQueue/</id>
    <published>2016-01-18T16:00:00.000Z</published>
    <updated>2016-02-03T06:49:14.000Z</updated>
    <content type="html"><![CDATA[<h3 id="NSOperation">NSOperation</h3><h3 id="概述">概述</h3><p><code>NSOperation</code>是一个抽象的类，包装了处理单个任务所需要的一些数据，代表执行单个任务的一个独立单元。不过尽管它是个抽象类，但是它已经帮我们处理了繁杂的多线程问题，并且可以确保线程安全，因此我们在使用的时候，就可以更专注于自己的业务。</p>
<p>苹果已经默认给我们封装好了两个类，分别是<code>NSInvocationOperation</code>和<code>NSBlockOperation</code></p>
<ul>
<li><p><code>NSInvocationBlock</code></p>
<p>  我们可以使用NSInvocationOperation来执行我们的后台任务，而不需要继承于NSOperation，我们要做的就是通过调用<code>-initWithTarget:selector:object:</code>，然后定义要执行任务的方法即可</p>
  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSInvocationOperation *theOp = [[NSInvocationOperation alloc] <span class="string">initWithTarget:</span>self <span class="string">selector:</span><span class="annotation">@selector</span>(<span class="string">myTaskMethod:</span>) <span class="string">object:</span>data];</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>NSBlockOperation</code> </p>
<p>  NSBlockOperation和NSInvocationOperation相似，只是我们可以使用block替代方法执行我们的任务</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSBlockOperation</span> *theOp = [<span class="built_in">NSBlockOperation</span> blockOperationWithBlock:^&#123;</span><br><span class="line">         <span class="built_in">NSLog</span>(<span class="string">@"Beginning operation.\n"</span>);</span><br><span class="line">       &#125;];</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>我们在block里面定义我们想要执行的任务，作为参数传给它，然后就会自动在后台线程执行了。</p>
<p>这两个类继承于NSOperation，可以直接使用，里面的逻辑我们不需要管。</p>
<p>当然，我们也可以直接继承NSOperation并且覆写一些方法，创建自己的operation，这个operation可以是并发也可以是非并发的。对于非并发，创建好之后，需要手动调用<code>start</code>方法；对于并发的operation，还需要生成一个<code>NSOperationQueue</code>，然后加入队列中即可。</p>
<p>创建一个非并发的operation比较简单，我们只需要覆写<code>main</code>方法，然后执行简单的任务并且对取消状态做判断就可以，其他工作交给NSOperation自身就可以啦。</p>
<p>如果要创建一个并发的operation，我们必须覆写一些已经存在的方法。</p>
<ul>
<li><p><code>start</code>（必须）</p>
<p>  所有的并发的operation必须覆写这个方法以替换掉默认的实现，这个方法中我们要做的就是做几个判断（比如是否已经被取消或者已经完成），执行任务所必须的线程环境，以确定operation能够正确的运行。 </p>
<ul>
<li>这个方法默认是在调用者的线程中调用的，也就是说，假如你直接调用<code>NSOperation</code>的<code>start</code>方法，<strong>那么这个操作会在你调用start的那个线程上同步执行</strong>，并且操作会马上执行。     </li>
<li>不要调用<code>super</code>。</li>
</ul>
</li>
<li><p><code>main</code>（可选）<br>  实现start方法之后，我们所有的任务可以在start里面实现，当然也可以覆写这个方法，将一部分简单的任务放在main中实现，有利于代码分离。</p>
<ul>
<li>这个方法中我们不需要手动创建autoreleasepool，因为NSOperation已经帮我们做了。</li>
<li>不要调用<code>super</code>。</li>
</ul>
</li>
<li><p><code>isExecuting</code>（必须）</p>
<p>  这个属性表示operation是否正在执行，正在执行则为<code>YES</code>否则为<code>NO</code>。</p>
</li>
<li><p><code>isFinished</code>（必须）</p>
<p>  这个属性表示operation<strong>是否已经完成或者取消</strong>，也就是说，<code>isFinished</code>为<code>YES</code>并不表示该operation已经完成，也有可能是operation被<code>cancel</code>掉了。假如该operation在操作队列里，那么只有等到<code>isFinished</code>为<code>YES</code>的时候，它才会被出列。因此，这个是非常重要的一个状态。</p>
</li>
<li><p><code>isConcurrent</code>（已忽略）    </p>
<p>  表示operation是否是并发的，默认值为<code>NO</code>。不过现在已经被忽略了。</p>
</li>
</ul>
<p>以下是苹果提供的示例代码</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyOperation</span> : <span class="title">NSOperation</span> </span>&#123;</span><br><span class="line">   <span class="built_in">BOOL</span> executing;</span><br><span class="line">   <span class="built_in">BOOL</span> finished;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)completeOperation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyOperation</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)init &#123;</span><br><span class="line">   <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">       executing = <span class="literal">NO</span>;</span><br><span class="line">       finished = <span class="literal">NO</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)start &#123;</span><br><span class="line">    <span class="comment">// Always check for cancellation before launching the task.</span></span><br><span class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> isCancelled]) &#123;</span><br><span class="line">        <span class="comment">// Must move the operation to the finished state if it is canceled.</span></span><br><span class="line">        [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"isFinished"</span>];</span><br><span class="line">        finished = <span class="literal">YES</span>;</span><br><span class="line">        [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"isFinished"</span>];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// If the operation is not canceled, begin executing the task.</span></span><br><span class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"isExecuting"</span>];</span><br><span class="line">    [<span class="built_in">NSThread</span> detachNewThreadSelector:<span class="keyword">@selector</span>(main) toTarget:<span class="keyword">self</span> withObject:<span class="literal">nil</span>];</span><br><span class="line">    executing = <span class="literal">YES</span>;</span><br><span class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"isExecuting"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)main &#123;</span><br><span class="line">   <span class="keyword">@try</span> &#123;</span><br><span class="line">       <span class="comment">// Do the main work of the operation here.</span></span><br><span class="line">       [<span class="keyword">self</span> completeOperation];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">@catch</span>(...) &#123;</span><br><span class="line">       <span class="comment">// Do not rethrow exceptions.</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)completeOperation &#123;</span><br><span class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"isFinished"</span>];</span><br><span class="line">    [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"isExecuting"</span>];</span><br><span class="line">    executing = <span class="literal">NO</span>;</span><br><span class="line">    finished = <span class="literal">YES</span>;</span><br><span class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"isExecuting"</span>];</span><br><span class="line">    [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"isFinished"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)isConcurrent &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)isExecuting &#123;</span><br><span class="line">  <span class="keyword">return</span> executing;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)isFinished &#123;</span><br><span class="line">  <span class="keyword">return</span> finished;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h3 id="取消">取消</h3><p>当operaiton开始执行之后，它会继续执行任务直到完成或者显式地被取消。假如我们想要取消一个operation，可以调用它的<code>cancel</code>方法，然后通过观察它的<code>isCancelled</code>方法来做一些后续处理。</p>
<ul>
<li><p><code>cancel</code></p>
<p>  这个方法用于取消一个operation，我们可以通过覆写cancel方法（记得调用<code>super</code>方法）来做我们自己的任务，比如我们可以在里面取消网络请求，但是当cancel之后，我们需要发送合适的KVO通知。    </p>
<p>  取消operation之后的行为取决于它是否在操作队列里：</p>
<ul>
<li>对于没有在操作队列里的operation，取消之后会直接标记<code>isFinished</code>为<code>YES</code></li>
<li>对于已经在操作队列里的operation，取消之后的行为取决于操作的状态：<ul>
<li>假如这个operation已经完成了，那么这个操作没有任何作用。</li>
<li>假如这个operation已经在操作队列中了，但是还没有开始执行（<code>start</code>方法还没有调用），那么它将不会被执行。</li>
<li>假如这个operation在操作队列中并且已经开始执行了，它只是简单的设置<code>isCancelled</code>为<code>YES</code>，取消并不会强制它退出，这个时候，我们就需要通过<code>isCancelld</code>方法来判断是否真的已经取消了，假如已经是取消状态了，我们就可以标记该operation为已完成，那么整个operation的状态就可以由<code>isCancelled -&gt; isFinished</code>。</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><code>isCancelld</code></p>
<p>  这个属性表示operation是否已经取消，我们需要经常检查这个属性是否为<code>YES</code>，因为cancel一个opration可能发生在任何时候，即使在operation开始执行之前。一般情况下，我们可以</p>
<ul>
<li>在operation开始之前。比如在<code>start</code>方法里面</li>
<li>在operation即将暂停的时候。默认的NSOperation并没有提供暂停操作，假如我们自己想要实现暂停功能，那么在暂停操作之前可以检查是否已经取消</li>
<li>在operation即将取消的时候。假如我们覆写了<code>cancel</code>方法，那么有必要在取消之前检查一下是否已经被取消，这样就不用做重复的工作了。</li>
</ul>
<p>示例代码</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (void)main &#123;</span><br><span class="line">    <span class="variable">@try</span> &#123;</span><br><span class="line">        <span class="constant">BOOL </span>isDone = <span class="constant">NO;</span></span><br><span class="line">        <span class="keyword">while</span> (![<span class="keyword">self</span> isCancelled] &amp;&amp; !isDone) &#123;</span><br><span class="line">            <span class="regexp">//</span> <span class="constant">Do </span>some work <span class="keyword">and</span> set isDone to <span class="constant">YES </span><span class="keyword">when</span> finished</span><br><span class="line">        &#125;</span><br><span class="line">     &#125; <span class="variable">@catch</span>(...) &#123;</span><br><span class="line">        <span class="regexp">//</span> <span class="constant">Do </span><span class="keyword">not</span> rethrow exceptions.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="完成">完成</h4><p>… 待写 completionBlock</p>
<h3 id="依赖和优先级">依赖和优先级</h3><p><code>NSOperation</code>有两个非常重要的功能，那就是依赖（<strong>dependency</strong>）和优先级（<strong>priority</strong>）了</p>
<p><code>NSOperation</code>允许我们添加或移除依赖，当我们需要一个operation在另一个operation完成之后才能开始的时候，那么这个属性就非常有用。</p>
<ul>
<li><code>addDependency</code><br>  添加依赖</li>
<li><code>removeDependency</code><br>  移除依赖</li>
</ul>
<p>依赖需要的一个重要状态就是<code>isReady</code></p>
<ul>
<li><p><code>isReady</code> </p>
<p>  这个属性用于指示operation是否已经准备好执行，也就是说，必须当operation的<code>isReady</code>为<code>YES</code>的时候，operation才可以执行。假如它没有准备好执行，也就是<code>isReady</code>为<code>NO</code>，一般有以下几种情况</p>
<ul>
<li>初始化工作未完成</li>
<li>它依赖了其他的operation，而依赖的operation并没有全部完成</li>
</ul>
</li>
</ul>
<p>这里需要注意</p>
<ul>
<li><strong>依赖并不被限制在同一个操作队列</strong>。假如操作A在队列A，操作B在队列B，那么A和B还是可以建立依赖关系的。</li>
<li><strong>一个operation如果要开始必须要等到它所依赖的所有operation全部完成之后才能开始</strong>，即依赖的所有operation的<code>isFinished</code>为<code>YES</code>的时候，除非你显式的取消依赖。 </li>
<li>在建立依赖关系的时候，最好确保所有的操作都还没有开始，也就是说，<strong>最好在它加入操作队列之前建立依赖关系</strong>，因为当operation加入到操作队列之后，它可能开始于任何时候，这个时候再去建立依赖或者修改操作本身可能会导致意料之外的结果。举个例子，假如A依赖B，那么当建立依赖关系的时候A已经开始操作而B并没有，那么这个依赖关系就不成立了，而你可能还在怀疑自己的依赖为什么不起作用。</li>
<li>避免循环依赖。</li>
<li>如果覆写了，记得调用<code>super。</code></li>
</ul>
<p>NSOperation还允许我们设置优先级，<strong>适用于在相互间没有依赖关系的operations使用</strong>，表示operation在NSOperationQueue中执行的优先程度，我们可以设置队列优先级和线程优先级。</p>
<ul>
<li><p><code>setQueuePriority:</code><br>  设置队列优先级，队列优先级影响到operation开始执行和退出队列的顺序。有下面几个可选值，默认是<code>NSOperationQueuePriorityNormal</code></p>
<ul>
<li><code>NSOperationQueuePriorityVeryLow</code></li>
<li><code>NSOperationQueuePriorityLow</code></li>
<li><code>NSOperationQueuePriorityNormal</code></li>
<li><code>NSOperationQueuePriorityHigh</code></li>
<li><code>NSOperationQueuePriorityVeryHigh</code></li>
</ul>
</li>
<li><p><code>setThreadPriority:</code><br>  设置线程优先级。一个浮点型值，可选值在<code>0.0</code>到<code>1.0</code>，默认为0.5</p>
</li>
</ul>
<p>NSOperationQueue在执行的时候，在调用operations的<code>start</code>之前，会查找所有的operation并比较它们的优先级，优先级高的操作优先执行，同级的操作按照提交到队列的顺序执行（FIFO）。</p>
<p>优先级（<strong>priority</strong>）不同于依赖，它是operation本身的属性，只能在相同队列中比较。意思就是说，如果有多个操作队列，其中的每个操作都有它自己的优先级，它们是互不影响的，因此在不同队列中低优先级有可能比高优先级的先执行。</p>
<h3 id="KVO">KVO</h3><p>NSOperation支持<code>KVO</code>，我们可以通过<code>KVO</code>观察operation的执行状态，默认有以下几个状态观察。</p>
<ul>
<li><code>isCancelled</code></li>
<li><code>isConcurrent</code></li>
<li><code>isExecuting</code></li>
<li><code>isFinished</code></li>
<li><code>isReady</code></li>
<li><code>dependencies</code></li>
<li><code>queuePriority</code></li>
<li><code>completionBlock</code></li>
</ul>
<p>我们要做的，就是在合适的地方发出<code>KVO</code>通知</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[self willChangeValueForKey:@"isFinished"]</span><span class="comment">;</span></span><br><span class="line"><span class="setting">finished = <span class="value"><span class="keyword">YES</span>;</span></span></span><br><span class="line"><span class="title">[self didChangeValueForKey:@"isFinished"]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h3 id="NSOperationQueue">NSOperationQueue</h3><h3 id="概述-1">概述</h3><p><code>NSOperationQueue</code>是一个负责执行operations的队列，我们可以添加我们的operation到队列里面，然后队列就会持有我们的operation，并且会按照我们设置的依赖或者优先级执行，直到我们显式地取消或者直到任务完成。</p>
<p>创建NSOperationQueue</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSOperationQueue *queue = <span class="comment">[<span class="comment">[NSOperationQueue alloc]</span> init]</span>;</span><br></pre></td></tr></table></figure>
<p>创建好之后，我们可以通过以下几个方法将operation添加到队列中</p>
<ul>
<li><p><code>addOperation:</code></p>
<p>  添加operation到队列</p>
</li>
<li><p><code>addOperations:waitUntilFinished:</code></p>
<p>  添加operation到队列，决定是否要等待operation完成，如果是，则将会阻塞当前线程直到任务完成返回；如果否，在操作加入到队列之后，方法会立刻返回。和此方法类似的是<code>waitUntilAllOperationsAreFinished</code>，不过它是等待全部任务完成才返回。这两个方法都不建议在主线程使用。</p>
</li>
<li><p><code>addOperationWithBlock:</code></p>
<p>  将任务以block的形式添加到队列中</p>
</li>
</ul>
<p>注意：当operation加入到操作队列之后，它可能开始于任何时候，它可能马上开始，也可能延迟一段时间开始。这里有几个情况延迟比较明显。</p>
<ul>
<li>当你加入的operation依赖其他operation，而其他operation并没有完成，这个延迟就更明显了</li>
<li>这个操作队列暂停了</li>
<li>这个操作队列已经达到它的最大并发数了，此刻它不得不等待某个operation完成之后，它才有机会执行</li>
</ul>
<h3 id="暂停和恢复">暂停和恢复</h3><p>当operation加入操作队列后，我们可以暂停或者恢复操作队列。</p>
<ul>
<li><p><code>setSuspended</code></p>
<p>  可以通过这个方法暂停或者恢复队列</p>
<ul>
<li>当设置为<code>NO</code>的时候，队列会开始执行操作</li>
<li><p>当设置为<code>YES</code>的时候，队列会阻止新的operation开始，但是并不会移除正在执行的operation，也就是说，正在执行中的operation并不会受影响。对于处于暂停状态的队列，假如这个时候继续添加operation进去，那么这些新加入的operation并不会执行，直到suspended变为<code>NO</code>。</p>
<p>比如有A、B、C三个operation，A已经在队列中执行，而B和C只是在队列中还没有开始（即start方法还没有执行），那么这个时候暂停队列只会阻止B和C开始，而A并不会有影响。</p>
</li>
</ul>
</li>
<li><p><code>isSuspended</code></p>
<p>  表示当前队列是否处在暂停状态</p>
</li>
</ul>
<h3 id="并发数">并发数</h3><p>也可以设置操作队列的最大并发数目</p>
<ul>
<li><p><code>maxConcurrentOperationCount</code></p>
<p>  队列同时可以执行的最大操作个数</p>
</li>
<li><p><code>setMaxConcurrentOperationCount:</code></p>
<p>  设置队列同时可以执行的最大操作个数。注意，减少这个值的时候，并不会影响已经在执行的operation，我们可以设置为<code>NSOperationQueueDefaultMaxConcurrentOperationCount</code>，这样队列的最大并发数就是由系统来决定了，并且这也是默认值。</p>
</li>
</ul>
<h3 id="取消-1">取消</h3><p>对于不想要的任务，我们可以取消所有操作</p>
<ul>
<li><p><code>cancelAllOperations</code></p>
<p>  取消所有在队列中的操作。这个方法只是对队列中的每个operation执行<code>cancel</code></p>
<ul>
<li>对于已经在队列中执行的operation，取消并不会将它们从队列中移除，它只是简单的设置<code>isCancelled</code>为<code>YES</code>，因此operation本身必须检查自己的<code>isCancelled</code>状态，假如已经是取消状态了，我们就可以标记该operation为已完成，那么整个operation的状态就可以由<code>isCancelled -&gt; isFinished</code>。</li>
<li>对于在队列中等待的operation，那么它将不会被执行。</li>
</ul>
</li>
</ul>
<h3 id="KVO-1">KVO</h3><p>和NSOperation一样，NSOperationQueue也支持<code>KVO</code>，我们可以通过<code>KVO</code>观察操作队列的执行状态。默认有以下几个属性可以观察</p>
<ul>
<li><code>operations</code></li>
<li><code>operationCount</code></li>
<li><code>maxConcurrentOperationCount</code></li>
<li><code>suspended</code></li>
<li><code>name</code></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="NSOperation">NSOperation</h3><h3 id="概述">概述</h3><p><code>NSOperation</code>是一个抽象的类，包装了处理单个任务所需要的一些数据，代表执行单个任务的一个独立单元。不过尽管它是个抽象类，但是它已]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS的事件响应机制]]></title>
    <link href="http://yoursite.com/2016/01/15/iOS%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%93%8D%E5%BA%94%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2016/01/15/iOS的事件响应机制/</id>
    <published>2016-01-14T16:00:00.000Z</published>
    <updated>2016-01-30T07:42:50.000Z</updated>
    <content type="html"><![CDATA[<p>学习iOS事件响应机制时候，经常会听到一个词，即<code>hit-testing</code>或者<code>hit-test</code>视图，字面意思理解为敲打测试，实际上，<code>hit-testing</code>是一个过程，是iOS用来确定用户点击的部分在屏幕哪个部位的一个方法，而点击部分所在的视图就是<code>hit-test</code>视图。</p>
<p>那么当用户触摸屏幕时，iOS是如何确定<code>hit-testing</code>并且最终找到这个<code>hit-testing</code>视图的呢。</p>
<p>当用户触摸屏幕即响应的事件发生时，<code>UIKit</code>首先会生成一个<code>UIEvent</code>对象，这个对象包含着事件的一些基本信息，包括事件类型、事件发生的时间，然后会将它放入<code>event queue</code>里面。接下来，就是事件从底部向上到顶部找到<code>hit-test</code>视图的过程了。</p>
<ul>
<li><code>UIApplication</code>对象从<code>event queue</code>中取出event，然后将它分发给其他对象处理。</li>
<li>然后<code>UIApplication</code>会先将event发送给<code>UIWindow</code>对象，接下来由window将事件传递到事件发生的那个视图。</li>
<li>那么window是怎么做的呢，它会自下而上遍历它的子视图，对每个视图调用<code>-hitTest:withEvent:</code>，而该方法会触发<code>-pointInside:withEvent:</code>检查触摸区域是否在该视图边界内，<ul>
<li>如果在则返回<code>YES</code>，并且<code>-hitTest:withEvent:</code>返回该视图自身，表示当前查找的这个视图是<code>hit-testing</code>视图；</li>
<li>否则为<code>NO</code>，<code>hitTest:withEvent:</code>返回<code>nil</code>，表示触摸事件并不发生在那个视图上面，那么该视图被抛弃，其所有子视图的<code>hitTest:withEvent:</code>也都返回<code>nil</code>，进而检查其他视图。</li>
</ul>
</li>
<li>如果触摸发生在相关视图上（即<code>pointInside:withEvent:</code>返回<code>YES</code>），那么该视图会再次遍历它的子视图（逆序），对每个子视图调用<code>-hitTest:withEvent:</code>做同样一遍查找过程，直到该视图没有子视图，最终确定那个视图为<code>hit-testing</code>视图，查找<code>hit-testing</code>视图的这个过程就叫做<code>hit-testing</code>。</li>
</ul>
<p>找到<code>hit-testing</code>视图之后，它就有机会去处理该事件，如果它不能处理，则事件会沿着响应链继续传递，每个响应者都有机会决定是否去处理事件或者继续传递给下一个响应者，直到找到一个可以处理它的对象或者被丢弃。</p>
<ul>
<li><code>hit-testing</code>视图是第一个可以处理事件的，如果它不能处理，则它会将事件传递给它的父视图</li>
<li>父视图如果不能处理，则它会再次传递给它的父视图</li>
<li>直到传到最顶端的视图，即直接添加到<code>UIWindow</code>上的那个视图，如果它还不能处理，则它会传递给它的视图控制器</li>
<li>如果视图控制器也不能处理，那么只能最后传递给window对象了</li>
<li>如果window对象无法处理，那么它会还给<code>UIApplication</code>对象</li>
<li>如果<code>UIApplication</code>也不处理，那么该事件就只能被丢弃。</li>
</ul>
<p>从以上可以看出，查找<code>hit-test</code>视图的过程是<strong>从下往上</strong>的，而找到之后查找响应者的过程是<strong>自下而上</strong>的。</p>
<p>接下来通过一个实例来说明一下。</p>
<p>这个图是苹果文档里的一个图，我用实验证明了一下</p>
<p><img src="/images/hit-test_1.png" alt="hit-test_1"></p>
<p>我点击在视图D上面，查看控制台的输出如下</p>
<p><img src="/images/hit-test_2.png" alt="hit-test_2"></p>
<p>从图中我们可以看到</p>
<ol>
<li><p>由<code>UIApplication</code>分发给<code>UIWindow</code>之后，首先调用<code>UIWindow</code>的<code>-hitTest:withEvent:</code>，进而调用<code>-pointInside:withEvent:</code>，发现触摸在window之内，因此返回<code>YES</code>,<code>-hitTest:withEvent:</code>返回window自身，表示当前<code>hit-test</code>视图是window。</p>
</li>
<li><p>遍历window上面的视图，由于window的子视图只有View A，因此调用View A的<code>-pointInside:withEvent:</code>，发现触摸在window之内，因此返回<code>YES</code>,<code>-hitTest:withEvent:</code>返回View A，表示当前<code>hit-test</code>视图是View A。</p>
</li>
<li><p>遍历View A上面的视图，这里要注意，ViewA的子视图有两个，分别是View B和View C，通过测试我发现调用的顺序是子视图逆序，即View C是在View B之后加的，</p>
<ul>
<li>因此这里先调用View C的<code>-pointInside:withEvent:</code>，发现触摸在View C之内，因此返回<code>YES</code>,<code>-hitTest:withEvent:</code>返回View C，表示当前<code>hit-test</code>视图是View C，因此View B则被忽略。</li>
<li>倘若这里View B加在View C之后，则会先调用View B</li>
</ul>
</li>
<li><p>接着遍历View C上面的视图，同样的道理，</p>
<ul>
<li>先测试View E，发现触摸不在上面，即View E的<code>pointInside:withEvent:</code>返回<code>NO</code>，所以View E的<code>-hitTest:withEvent:</code>返回<code>nil</code></li>
<li>再测试View D，发现触摸在上面，<code>pointInside:withEvent:</code>返回<code>YES</code>，<code>-hitTest:withEvent:</code>返回View D，表示当前<code>hit-test</code>视图是View D。</li>
</ul>
</li>
<li><p>再次遍历View D上面的子视图，发现已经没有子视图，因此此次点击最终的<code>hit-test</code>视图是View D</p>
</li>
</ol>
<p>不知道大家有没有注意到那个图，<code>hit-testing</code>过程执行了两遍，至于为什么会执行两遍，目前还不清楚。</p>
<p>了解了<code>hit-testing</code>过程之后，这就很好理解，有时候我们添加一个button在view上面，点击之后无法响应事件的原因了。</p>
<p>如图，我在View B上添加了一个button，查看button的响应情况</p>
<p><img src="/images/hit-test_3.png" alt="hit-test_3"></p>
<p>首先，我点击在button右侧，注意点击的部位必须在View B之内，查看输出情况。</p>
<p><img src="/images/hit-test_4.png" alt="hit-test_4"></p>
<p>可以看到，查找View B之后，发现在View B上，然后查找button，发现也在button之上，因此，正常的响应了事件。</p>
<p>然后，我点击在button左侧，点击在View B之外</p>
<p><img src="/images/hit-test_5.png" alt="hit-test_5"></p>
<p>可以看到，View B在检测的时候，发现点击在View B之外，因此<code>-pointInside:withEvent</code>直接返回<code>NO</code>，接着<code>-hitTest:withEvent:</code>返回<code>nil</code>，表示触摸事件并不发生在那个视图上面，则它的所有子视图的<code>-hitTest:withEvent:</code>全部返回<code>nil</code>，因此button并不会响应我们的点击事件。</p>
<p>这种情况尤其要注意，尤其是我们设置了<code>clipsToBounds</code>为<code>NO</code>的时候。</p>
<p>那么假如我们想要button继续响应事件呢，只需要在<code>-hitTest:withEvent:</code>方法里修改即可</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">UIView</span> *)hitTest:(<span class="built_in">CGPoint</span>)point withEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ [-hitTest:withEvent:]"</span>, <span class="keyword">self</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将点击的点转化为button自身的坐标</span></span><br><span class="line">    <span class="built_in">CGPoint</span> touchPointInButton = [<span class="keyword">self</span><span class="variable">.button</span> convertPoint:point fromView:<span class="keyword">self</span>];</span><br><span class="line">    <span class="comment">// 如果点击的点在button之内，则返回</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">CGRectContainsPoint</span>(<span class="keyword">self</span><span class="variable">.button</span><span class="variable">.bounds</span>, touchPointInButton)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.button</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> hitTest:point withEvent:event];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们所做的就是判断点击的点是否在button之内，如果是，则返回button为<code>hit-test</code>视图，否则，调用super处理。</p>
<p>因此，通过<code>hit-testing</code>我们可以改变事件的分发，可以完成诸如点击A而让B响应的特殊情况，进而满足一些特殊的需求。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>学习iOS事件响应机制时候，经常会听到一个词，即<code>hit-testing</code>或者<code>hit-test</code>视图，字面意思理解为敲打测试，实际上，<code>hit-testing</code>是一个过程，是iOS用来确定用户点击的部分在屏]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS Method Swizzling]]></title>
    <link href="http://yoursite.com/2016/01/14/iOS_Method_Swizzling/"/>
    <id>http://yoursite.com/2016/01/14/iOS_Method_Swizzling/</id>
    <published>2016-01-13T16:00:00.000Z</published>
    <updated>2016-01-30T05:59:30.000Z</updated>
    <content type="html"><![CDATA[<p>先来看下面这段代码</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">+ (void)load &#123;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        Class <span class="class"><span class="keyword">class</span> = [<span class="title">self</span> <span class="title">class</span>];</span></span><br><span class="line"></span><br><span class="line">        SEL oldSelector = @selector(viewDidLoad);</span><br><span class="line">        SEL newSelector = @selector(xxx_viewDidLoad);</span><br><span class="line"></span><br><span class="line">        Method oldMethod = class_getInstanceMethod(<span class="class"><span class="keyword">class</span>, <span class="typename">oldSelector);</span></span></span><br><span class="line">        Method newMethod = class_getInstanceMethod(<span class="class"><span class="keyword">class</span>, <span class="typename">newSelector);</span></span></span><br><span class="line"></span><br><span class="line">        IMP oldIMP = method_getImplementation(oldMethod);</span><br><span class="line">        IMP newIMP = method_getImplementation(newMethod);</span><br><span class="line"></span><br><span class="line">        const char *oldMethodType = method_getTypeEncoding(oldMethod);</span><br><span class="line">        const char *newMethodType = method_getTypeEncoding(newMethod);</span><br><span class="line"></span><br><span class="line">        BOOL didAddMethod = class_addMethod(<span class="class"><span class="keyword">class</span>, <span class="typename">oldSelector</span>, <span class="typename">newIMP</span>, <span class="typename">newMethodType);</span></span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (didAddMethod) &#123;</span><br><span class="line">            class_replaceMethod(<span class="class"><span class="keyword">class</span>, <span class="typename">newSelector</span>, <span class="typename">oldIMP</span>, <span class="typename">oldMethodType);</span></span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            method_exchangeImplementations(oldMethod, newMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)xxx_viewDidLoad</span><br><span class="line">&#123;</span><br><span class="line">    [self xxx_viewDidLoad];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码想必只要我们学习过<code>method swizzle</code>的同学都很熟悉，实现也比较简单。其中有两个地方需要注意，也是难点，即</p>
<p><code>BOOL didAddMethod = class_addMethod(class, oldSelector, newIMP, newMethodType);</code></p>
<p>和</p>
<p><code>[self xxx_viewDidLoad];</code></p>
<p>讲解第一点之前，必须先了解一下<code>class_getInstanceMethod</code>函数的功能。</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">定义：<span class="function"><span class="keyword">Method</span> <span class="title">class_getInstanceMethod</span><span class="params">(<span class="keyword">Class</span> aClass, SEL aSelector)</span></span><br><span class="line"></span><br><span class="line">说明：指定类和方法选择器返回对应的实例方法，即<span class="title">Method</span>；如果不存在，则返回<span class="title">NULL</span>。</span></span><br></pre></td></tr></table></figure>
<p>其中有个需要注意的地方，官方文档描述该方法如下</p>
<blockquote>
<p><strong>Discussion</strong></p>
<p>Note that this function searches superclasses for implementations, whereas class_copyMethodList does not.</p>
</blockquote>
<p>从中可以看到，该函数会搜索父类的实现，如果该选择器没有在本类实现，则它会查找父类的实现，如果父类实现了，则返回；而<code>class_copyMethodList</code>并不会返回父类的方法。</p>
<p>因此我们回到刚才那个问题，假如我们要替换的方法在本类中并没有实现而父类实现了，则<code>class_getInstanceMethod</code>返回了父类的实现，我们再使用<code>method_exchangeImplementations</code>交换实现，这样的结果是什么呢？就是我们替换了我们想要替换的类的父类的方法，这并不是我们想要的。</p>
<p>因此先用<code>class_addMethod</code>这个方法<code>Hit-Testing</code>一下本类有没有实现这个方法，</p>
<ul>
<li>如果本类已经实现了该方法，则会添加失败，那么我们开开心心的<code>method_exchangeImplementations</code>就好了；</li>
<li>但是假如本类没有实现呢，那么该方法会自动为该类添加该方法，并且指向我们的新实现，然后我们再使用<code>class_replaceMethod</code>将新方法指向老的实现。实际上因为<code>class_addMethod</code>已经成功，即已经<code>oldSelector --&gt; newIMP</code>，所以我们只需要<code>newSelector --&gt; oldIMP</code>即可，因此<code>class_replaceMethod</code>可以被替换成<code>method_setImplementation(swizzledSelector, method_getImplementation(originalMethod));</code>，直接将新方法指向老实现。</li>
</ul>
<p>可能有些同学会被绕晕，我举个实例。</p>
<p>比如我想要替换掉<code>UITableViewController</code>的<code>viewDidLoad</code>的实现，由于<code>UITableViewController</code>的<code>viewDidLoad</code>是在其父类<code>UIViewController</code>中实现的（<code>class-dump</code>出来看到的），因此<code>class_addMethod</code>会添加成功；如果直接交换实现的话，就把它的父类<code>UIViewController</code>的<code>viewDidLoad</code>的实现替换了，这就不是我们的初衷了。</p>
<p>接下来讲一下为什么要调用老方法，或者我们不调用老方法那它真的就没调用了吗。</p>
<p>顾名思义，系统调用老方法的时候，由于它的实现被指向了我自己的实现，我们实现自己的逻辑之后，当然要调用原来的方法，不然就像隐藏了一个定时炸弹，指定什么时候出现什么奇怪的问题。比如我自己为了测试，hook了<code>UIView</code>的<code>-setBackgroundColor:</code>方法，假如我不调用老方法，则不管我将view设置成什么颜色，它将都是黑色，这说明了的确老方法的实现被我们绕过了。因此，为了安全起见，我们在自己的方法里面一定要调用原来的方法。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>先来看下面这段代码</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</sp]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用clang语法消除编译警告]]></title>
    <link href="http://yoursite.com/2015/11/24/%E4%BD%BF%E7%94%A8clang%E8%AF%AD%E6%B3%95%E6%B6%88%E9%99%A4%E7%BC%96%E8%AF%91%E8%AD%A6%E5%91%8A/"/>
    <id>http://yoursite.com/2015/11/24/使用clang语法消除编译警告/</id>
    <published>2015-11-24T04:51:33.000Z</published>
    <updated>2016-01-30T09:27:00.000Z</updated>
    <content type="html"><![CDATA[<p>自己总结了一些常用的clang语法用于消除Xcode警告</p>
<p><em>用法</em></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> clang diagnostic push</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> clang diagnostic ignored <span class="string">"-Wundeclared-selector"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// your code</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> clang diagnostic pop</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Warning</th>
<th style="text-align:left">Message</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-Warc-performSelector-leaks</code></td>
<td style="text-align:left"><code>performSelector</code>可能会造成内存泄露因为无法知道具体的selector</td>
</tr>
<tr>
<td><code>-Wunreachable-code&quot;</code></td>
<td style="text-align:left">无法执行到的代码</td>
</tr>
<tr>
<td><code>-Wunused-function</code></td>
<td style="text-align:left">没有使用的函数</td>
</tr>
<tr>
<td><code>-Wdeprecated-implementations</code></td>
<td style="text-align:left">标记为已经废弃的方法</td>
</tr>
<tr>
<td><code>-Wdeprecated-declarations</code></td>
<td style="text-align:left">消除使用废弃方法警告</td>
</tr>
<tr>
<td><code>-Wreceiver-is-weak</code>和<code>-Warc-repeated-use-of-weak</code></td>
<td style="text-align:left">接受者是weak属性</td>
</tr>
<tr>
<td><code>-Wundeclared-selector</code></td>
<td style="text-align:left">未定义的selector</td>
</tr>
<tr>
<td><code>-Wgnu</code></td>
<td style="text-align:left">未知</td>
</tr>
<tr>
<td><code>-Wreturn-type</code></td>
<td style="text-align:left">control reaches end of non-void function</td>
</tr>
<tr>
<td><code>-Wimplicit-function-declaration</code></td>
<td style="text-align:left">implicit declaration of function</td>
</tr>
<tr>
<td><code>-Wconversion</code></td>
<td style="text-align:left">消除精度丢失warning</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<p>自己总结了一些常用的clang语法用于消除Xcode警告</p>
<p><em>用法</em></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1]]>
    </summary>
    
  </entry>
  
</feed>
